---
import ArrowLeft from './icons/ArrowLeft.astro'
import ArrowRight from './icons/ArrowRight.astro'

const { page } = Astro.props

// Function to generate page URLs
const getPageUrl = (pageNum: number) => {
	if (pageNum === 1) {
		// For first page, remove the /1 from the URL
		return page.url.prev ? page.url.prev.replace(/\/\d+$/, '') : '#'
	}

	// For other pages, replace the current page number in the URL
	const baseUrl = page.url.current.replace(/\/\d+$/, '')
	return `${baseUrl}/${pageNum}`
}

// Generate array of page numbers to display
const generatePageNumbers = () => {
	const pageNumbers = []
	const currentPage = page.currentPage
	const lastPage = page.lastPage

	// Always include first page
	pageNumbers.push(1)

	// Calculate range around current page (current +/- 2)
	let rangeStart = Math.max(2, currentPage - 2)
	let rangeEnd = Math.min(lastPage - 1, currentPage + 2)

	// Add ellipsis after first page if needed
	if (rangeStart > 2) {
		pageNumbers.push('...')
	}

	// Add pages in the range
	for (let i = rangeStart; i <= rangeEnd; i++) {
		pageNumbers.push(i)
	}

	// Add ellipsis before last page if needed
	if (rangeEnd < lastPage - 1) {
		pageNumbers.push('...')
	}

	// Always include last page if it's not the first page
	if (lastPage > 1) {
		pageNumbers.push(lastPage)
	}

	return pageNumbers
}

const pageNumbers = generatePageNumbers()
---

<div class='flex flex-col gap-3 items-center'>
	<!-- Previous and Next buttons row -->
	<div class='flex gap-5 md:gap-1 justify-around md:justify-end w-full'>
		<!-- Previous Button -->
		{
			page.start > 0 && (
				<a
					href={page.url.prev}
					class='flex items-center justify-center px-8 md:px-4 h-10 text-base font-medium text-black bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-transparent dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'
				>
					<ArrowLeft />
				</a>
			)
		}

		<!-- Next Button -->
		{
			page.currentPage < page.lastPage && (
				<a
					href={page.url.next}
					class='flex items-center justify-center px-8 md:px-4 h-10 ml-3 text-base font-medium text-black bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-transparent dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'
				>
					<ArrowRight />
				</a>
			)
		}
	</div>

	<!-- Page numbers row -->
	{
		page.lastPage > 1 && (
			<div class='flex gap-2 justify-center flex-wrap'>
				{pageNumbers.map((pageNum) => {
					if (pageNum === '...') {
						return (
							<span class='flex items-center justify-center w-10 h-10 text-base font-medium text-gray-500'>
								...
							</span>
						)
					}

					const isCurrentPage = pageNum === page.currentPage
					return (
						<a
							href={isCurrentPage ? '#' : getPageUrl(pageNum as number)}
							class={`flex items-center justify-center w-10 h-10 text-base font-medium rounded-lg ${
								isCurrentPage
									? 'bg-gray-700 text-white dark:bg-gray-600'
									: 'text-black bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-transparent dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'
							}`}
							aria-current={isCurrentPage ? 'page' : undefined}
						>
							{pageNum}
						</a>
					)
				})}
			</div>
		)
	}
</div>
