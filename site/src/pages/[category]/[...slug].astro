---
import { type CollectionEntry, getCollection } from 'astro:content'
import BlogPost from '@/layouts/BlogPost'
import Code from '@/components/mdx/Code'
import ListRelatedPosts from '@/components/ListRelatedPosts'
import Share from '@/components/Share'
import TableOfContents from '@/components/TableOfContents'
import { getAllCollection, getPosts, getCategoryName, sluglify } from '@/utils'
import SButton from '@/components/mdx/SButton'
import Disqus from '@/components/Disqus'
import { disqusConfig } from '@/data/disqus.config'
import { components } from '../../components/mixins/AutoImportComponents'

const posts = await getPosts()
export async function getStaticPaths() {
	const posts = await getPosts()

	return posts.map((post) => ({
		params: {
			slug: post.slug,
			category: sluglify(getCategoryName(post.data.category).toLowerCase())
		},
		props: post
	}))
}
type Props = CollectionEntry<'post'>

const post = Astro.props
const MAX_POSTS = 3
const getRelatedPosts = (post: Props) => {
	const lowercaseTags = post.data.tags.map((tag) => tag.toLowerCase())
	const relatedPosts = posts.filter(
		(p) => p.slug !== post.slug && p.data.tags.some((t) => lowercaseTags.includes(t.toLowerCase()))
	)
	return relatedPosts.slice(0, MAX_POSTS)
}

const relatedPosts = getRelatedPosts(post)

const { Content, headings, remarkPluginFrontmatter } = await post.render()

const disqusEnabled = disqusConfig.enabled
---

<BlogPost
	id={post.id}
	data={post.data}
	headings={headings}
	readTime={remarkPluginFrontmatter.minutesRead}
>
	<div class='grid grid-cols-1 md:grid-cols-[20%_auto] gap-10 mt-8'>
		<!-- aside  -->
		<aside class='md:flex flex-col gap-8 hidden'>
			<Share />
			<div class='sticky top-24 self-start hidden md:block transition-all duration-200'>
				{headings && headings.length > 0 && <TableOfContents {headings} />}
			</div>
		</aside>

		<!-- post -->
		<article class='max-w-full w-full'>
			<div class='prose prose-lg md:prose-xl dark:prose-invert mb-12 min-w-full'>
				<Content components={{ ...components, pre: Code, SButton }} />
			</div>

			<!-- Back to Top button (inside article) -->
			<button
				id='back-to-top'
				aria-label='Back to top'
				class='fixed bottom-20 -translate-x-1/2 transform z-40 inline-flex items-center justify-center rounded-full bg-indigo-600 text-white shadow-lg h-10 w-10 opacity-0 pointer-events-none transition-opacity duration-300 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-400'
				title='Back to top'
				style='left:50%'
			>
				<svg
					xmlns='http://www.w3.org/2000/svg'
					viewBox='0 0 24 24'
					fill='none'
					stroke='currentColor'
					stroke-width='2'
					stroke-linecap='round'
					stroke-linejoin='round'
					class='h-5 w-5'
				>
					<path d='M12 5v14'></path>
					<path d='M5 12l7-7 7 7'></path>
				</svg>
			</button>

			<!-- related posts -->
			<footer>
				<h2 class='font-bold text-lg dark:text-white mb-6'>Related Posts</h2>
				<ListRelatedPosts posts={relatedPosts} />
			</footer>
		</article>
	</div>

	{disqusEnabled && <Disqus />}
</BlogPost>


<script>
	const initBackToTop = () => {
		const btn = document.getElementById('back-to-top')
		if (!btn) return

		// Position the button centered relative to the closest article
		const position = () => {
			const article = btn.closest('article')
			if (!article) return
			const rect = article.getBoundingClientRect()
			const centerLeft = rect.left + rect.width / 2
			btn.style.left = `${centerLeft}px`
		}

		const toggle = () => {
			const show = window.scrollY > 400
			btn.style.opacity = show ? '1' : '0'
			btn.style.pointerEvents = show ? 'auto' : 'none'
		}

		window.addEventListener('scroll', toggle, { passive: true })
		window.addEventListener('resize', position)
		btn.addEventListener('click', (e) => {
			e.preventDefault()
			window.scrollTo({ top: 0, behavior: 'smooth' })
		})

		// initial state
		position()
		toggle()
	}

	initBackToTop()
	document.addEventListener('astro:after-swap', initBackToTop)
</script>
